{"data":{"markdownRemark":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"簡化後題目敘述"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{},"children":[{"type":"element","tagName":"showvariable","properties":{"varname":"description"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"輸入說明"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"第一列有一個正整數 $n$ （$1\\le n\\le 300000$）。接下來的 $n$ 列每一列有兩個整數 $v_i, l_i$，這些數字都介於 $0$ 到 $10^9$ 之間。輸入保證所有 $v_i$ 都不重複。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"輸出說明"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"輸出最小誤差值，精確到小數點以下第一位。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"範例輸入 1"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"5\n0 0\n2 1\n3 5\n6 7\n7 11\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"範例輸出 1"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"1.0\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"範例輸入 2"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"10\n5 9\n8 9\n0 0\n23 18\n26 18\n2 0\n3 0\n13 9\n18 9\n21 18\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"範例輸出 2"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"0.0\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"OJ 連結"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://codeforces.com/gym/101987"},"children":[{"type":"text","value":"Codeforces Gym"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"題目出處"}]},{"type":"text","value":"：ICPC 2018 Asia Seoul Regional"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"解法"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"可以對答案做二分搜：如果存在一個誤差 $\\le  x$ 的函數，那就會存在一個誤差 $\\le x'$ 的函數（$x \\le x'$）。於是只要有個方法判斷對於給定誤差值 $x$，是否存在一個函數 $F$ 其誤差值 $\\le x$ 就行了。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"固定好誤差值以後，我們可以試圖把序列分成連續的三段。顯然第一段可以盡可能地把 $\\le x$ 的那些數字吃掉。接下來得要判斷能否將剩下的數字分成兩段，並決定 $L_1$ 與 $L_2$ 的值並使得兩段的誤差值皆 $\\le x$。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"若存在一個誤差值不超過 $x$ 的函數，那麼指定 $L_1= (\\text{第二段的最大值})-x$、以及 $L_2=(\\text{第二與第三段的最大值})-x$ 也得是一個誤差不超過 $x$ 的函數。我們可以用線性時間預處理這兩個值，並且判斷它們是否滿足題目要求。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"參考程式碼"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"下面程式碼有很多地方可以省略不算，但是為了保持結構的完整性我還是把他們都寫下來了。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"有個很心機的地方，要注意到當輸入的 $(v, l)$ 數對裡面的 $v=0$ 的時候，不能把 $l$ 算入第二段或第三段。為了避免它影響二分搜的實作，這種情形出現時，不妨就直接定為二分搜的值 $x$ 的下界吧。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-cpp"]},"children":[{"type":"text","value":"#include <bits/stdc++.h>\nusing namespace std;\n\nbool test(const vector<int> &a, int twice_x) {\n  int n = a.size();\n  vector<int> lmax(n), rmax(n), lmin(n), rmin(n);\n\n  // 找出第一段。\n  int start = 0;\n  while (start < n && a[start] * 2 <= twice_x)\n    start++;\n  if (start >= n - 1)\n    return true;\n\n  // 處理第二段與第三段。\n  lmax[start] = a[start];\n  lmin[start] = a[start];\n  rmax[n - 1] = a[n - 1];\n  rmin[n - 1] = a[n - 1];\n\n  for (int i = start + 1; i < n; i++) {\n    lmax[i] = max(lmax[i - 1], a[i]);\n    lmin[i] = min(lmin[i - 1], a[i]);\n  }\n  for (int i = n - 2; i >= start; i--) {\n    rmax[i] = max(rmax[i + 1], a[i]);\n    rmin[i] = min(rmin[i + 1], a[i]);\n  }\n\n  // 枚舉可能的分界點。\n  for (int i = start; i + 1 < n; i++) {\n    int L1_minus_x = lmax[i] - twice_x;\n    int L2_minus_x = rmax[start] - twice_x;\n    if (L1_minus_x <= lmin[i] && L2_minus_x <= rmin[i + 1])\n      return true;\n  }\n\n  return false;\n}\n\nint main() {\n  // 輸入檔比較大，所以要用較快的輸入方式。\n  ios_base::sync_with_stdio(false);\n  cin.tie(NULL);\n\n  int n;\n  cin >> n;\n  vector<pair<int, int>> input;\n  for (int i = 0; i < n; i++) {\n    int x, y;\n    cin >> x >> y;\n    input.emplace_back(x, y);\n  }\n  sort(input.begin(), input.end());\n\n  // 把輸入轉存到陣列裡面，v值排好序以後就不需要了。\n  vector<int> a;\n  for (auto it : input)\n    a.push_back(it.second);\n\n  // 定義二分搜的左右界。\n  long long l = (input[0].first == 0 ? a[0] * 2 : 0), r = 2e9, ans = 2e9;\n  while (l <= r) {\n    long long m = (l + r) / 2;\n    if (test(a, m)) {\n      ans = m;\n      r = m - 1;\n    } else {\n      l = m + 1;\n    }\n  }\n\n  cout << ans / 2 << \".\" << (ans % 2 * 5) << endl;\n  return 0;\n}\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"備註"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"這題畢竟只是一連串的「連續片段最大值、最小值查詢」。因此如果我們使用 "},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/Range_minimum_query"},"children":[{"type":"text","value":"RMQ問題"}]},{"type":"text","value":" 的相關演算法——包含 $O(n)-O(1)$ 的預處理（+/-1 RMQ、建立最大值與最小值的稀疏表格 Sparse Table），再加上使用三分搜找出第二與第三段之間的分界，整題的時間複雜度可以變成 $O(n+\\log C\\log n)$。再用力一點的話可以把二分搜的部份離散化，作到 $O(n+\\log^2 n) = O(n)$。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"關於競程日記"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"🍅 如果您想到更多有趣漂亮簡單乾淨的解法話歡迎留言給競程日記小編群！"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"ℹ️ 這是一篇投稿給"},{"type":"element","tagName":"a","properties":{"href":"https://www.facebook.com/%E7%AB%B6%E7%A8%8B%E6%97%A5%E8%A8%98-1514973425463954/"},"children":[{"type":"text","value":"競程日記"}]},{"type":"text","value":"的文章，歡迎大家投稿、交流與分享程式解題競賽的點點滴滴！"}]}],"data":{"quirksMode":false}},"frontmatter":{"date":"January 26, 2019","path":"/problem/icpc/asia_seoul_2018/E","title":"LED","description":"給你 $n$ 筆資料點 $(v_i, l_i)$。你的目標是要找出一個由參數 $0< V_1< V_2$ 以及 $0\\le L_1 \\le L_2$ 定義出來的三階段函數 $F(v) = \\begin{cases}\n0 & \\text{if } 0\\le v < V_1\\\\\nL_1 & \\text{if } V_1\\le v < V_2\\\\\nL_2 & \\text{if } v\\ge V_2\n\\end{cases}$，使得這個函數引出的誤差值最小。誤差的定義如下：\n$ \\text{error}(F) = \\max_{1\\le i\\le n}|l_i - F(v_i)|\\text{。}\n$\n","roadmap_label_h3":null,"backlink":"/icpcblog-weekly-2019"}}},"pageContext":{}}