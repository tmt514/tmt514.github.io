{"data":{"markdownRemark":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"這篇文章是線性規劃章節的延伸，但目前還沒有寫線性規劃相關文章。還請大家先行理解"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"線性規劃"}]},{"type":"text","value":"與"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"對偶性質"}]},{"type":"text","value":"XD"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"最小費用流問題"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["message","is-info"]},"children":[{"type":"element","tagName":"div","properties":{"className":["message-body"]},"children":[{"type":"text","value":"\n給定一個圖 $G=(V, E, cap: E\\to \\mathbb{R}_{\\ge 0}, cost: E\\to \\mathbb{R})$，每一條邊都有一個流量上限 $cap$ 和單位流量花費 $cost$。試問，從 $s$ 到 $t$ 的所有最大流之中，最小的花費為何？\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"這個問題由於有 $s$ 和 $t$ 兩個特殊點，實際處理起來可能稍微麻煩些，所以我們先把它轉化成最小費用循環問題（Min-Cost Circulation）。轉化方法很簡單，其實只是加一條額外的邊 $t\\to s$，容量為無窮大、單位流費用為一個負很大的數字 $-\\mathit{big}$。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"最小費用循環 Min-Cost Circulation"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["message","is-info"]},"children":[{"type":"element","tagName":"div","properties":{"className":["message-body"]},"children":[{"type":"text","value":"\n給定一個圖 $G=(V, E, cap: E\\to \\mathbb{R}_{\\ge 0}, cost: E\\to \\mathbb{R})$，每一條邊都有一個流量上限 $cap$ 和單位流量花費 $cost$。找一個 Circulation（沒有起點和終點的網路流） 使得總花費最小。\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果所有的花費都是正的，顯然一個空的流（總花費是 0）是最佳解。如果我們把這個問題的條件寫成線性規劃的形式，令 $f(u, v)$ 表示該條邊上面的流量，那麼它會長得像這樣："}]},{"type":"text","value":"\n$$\n\\begin{align*}\n\\text{minimize}\\ \\ & \\sum f(u, v) \\cdot cost(u, v)\\\\\n\\text{subject to}\\ \\ & {\\color{green}{\\forall (u, v),\\ \\ f(u, v) \\le cap(u, v)}} & {\\color{green}{\\text{ (容量限制)}}}\\\\\n& {\\color{brown}{\\forall v\\in V, \\ \\ \\sum_u f(u, v) - \\sum_u f(v, u) = 0}} & {\\color{brown}{\\text{ (流量守恆)}}}\\\\\n\\text{variables}\\ \\ & f(u, v) \\ge 0\n\\end{align*}\\\\\n$$\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果我們試圖找出他的對偶問題，那麼每一個條件會變成對偶問題的變數、而每一個變數也會對應到對偶問題的一個條件：對於每一個容量限制，我們用 $y(u, v)$ 作為容量限制條件的對應變數、令 $d(v)$ 作為流量守恆條件的對應變數。"}]},{"type":"text","value":"\n$$\n\\begin{align*}\n\\text{maximize}\\ \\ & \\sum {\\color{green}{y(u, v)}} \\cdot cap(u, v)\\\\\n\\text{subject to}\\ \\ & \\forall (u, v), \\ \\ {\\color{green}{y(u, v)}} - {\\color{brown}{d(u)}} + {\\color{brown}{d(v)}} \\le cost(u, v)\\\\\n\\text{variables}\\ \\ & {\\color{green}{y(u, v)}} \\le 0\n\\end{align*}\\\\\n$$\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"由於 ${\\color{green}{y(u, v)}}$ 值永遠非正的，而每一個值又只會出現在恰好一個對偶條件裡面，外加上 $cap(u, v) \\ge 0$。我們可以知道，當 ${\\color{brown}{d(v)}}$ 的所有值固定以後，永遠可以找到一組 ${\\color{green}{y(u, v)}}$ 滿足對偶條件：只要令"}]},{"type":"text","value":"\n$$\n{\\color{green}{y(u, v)}} = \\min\\{0, {\\color{brown}{d(u)}} + cost(u, v) - {\\color{brown}{d(v)}}\\}\n$$\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"就可以了。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"正確地寫下最小費用循環的線性規劃模型以後，我們就可以利用線性規劃的最佳解性質，幫助我們判斷找到的網路流是不是最佳解。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"最佳解的性質"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"線性規劃的對偶觀念中，最重要的三件事情「弱對偶性」、「強對偶性」以及「"},{"type":"element","tagName":"a","properties":{"href":"http://terms.naer.edu.tw/detail/559045/"},"children":[{"type":"text","value":"互補差餘"}]},{"type":"text","value":"」（這詞﹍）。假設我們今天已經找到了圖 $G$ 上面的網路流 $f$，我們要怎麼檢驗或確認這個 $f$ 是最佳解呢？"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["message","is-warning"]},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["message-header"]},"children":[{"type":"text","value":"\n弱對偶性（Weak Duality）\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["message-body"]},"children":[{"type":"text","value":"\n若 $f$ 是最小費用流線性規劃的一個可行解，且 $y, d$ 是滿足對偶條件的對偶問題可行解。那麼必定有\n$$\n\\sum f(u, v)\\cdot cost(u, v) \\ge \\sum y(u, v)\\cdot cap(u, v)。\n$$\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"弱對偶性（Weak Duality）告訴我們，如果存在一組對偶可行解 $y(u, v)$、$d(v)$ 滿足 $\\sum f(u, v)\\cdot cost(u, v) = \\sum y(u, v)\\cdot cap(u, v)$，那麼 $f, y, d$ 同時都是最佳解。如果我們的演算法可以正確地輸出 $f, y, d$，那麼從這個輸出就可以得知正確性。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"最小費用流的演算法"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"基於以上論述，綜觀歷來的最小費用流解法們，可以大致分成兩個門派："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"消圈算法（Cycle-Cancellation Algorithms）"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"主要的概念是在每一次迭代的過程中，永遠保證 $f$ 是一個可行解（feasible solution，也就是一個合法的網路流），在對偶空間中試圖搜尋滿足條件的 $d$ 值。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"最短路徑增廣法（Successive-Shortest-Path Algorithms）"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"主要的概念是在每一次迭代的過程中，永遠保證 $d$ 是一組滿足對偶條件的距離函數，並且我們維護一個假想流 $f$（pseudo flow：只滿足"},{"type":"element","tagName":"span","properties":{"style":"color:green"},"children":[{"type":"text","value":"容量限制"}]},{"type":"text","value":"但可能無法"},{"type":"element","tagName":"span","properties":{"style":"color:brown"},"children":[{"type":"text","value":"流量守恆"}]},{"type":"text","value":"）。然後試圖更新這個假想流，一旦更新後滿足了流量守恆，我們就得到解了（因為隨時保證 $d$ 以及從 $d$ 推導出的 $y$ 永遠是合法的對偶問題可行解）。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"我們會在未來的文章介紹這兩種演算法的細節與簡單版的實作。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"參考資料"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"http://www.columbia.edu/~cs2035/courses/ieor6614.S12/mcf-sp.pdf"},"children":[{"type":"text","value":"最小均值圈與最小費用流 Columbia講義"}]}]},{"type":"text","value":"\n"}]}],"data":{"quirksMode":false}},"frontmatter":{"date":"November 16, 2018","path":"/algo/min-cost-max-flow","title":"最小費用流 Min-Cost Max-Flow","description":null}}},"pageContext":{}}