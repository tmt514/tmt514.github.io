{"data":{"markdownRemark":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"簡化後題目敘述"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{},"children":[{"type":"element","tagName":"showvariable","properties":{"varname":"description"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"輸入說明"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"輸入的第一列包含一個正整數 $n$ $(1\\le n\\le 50)$ 表示 ID 的長度。\n第二列有一個由 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"1"}]},{"type":"text","value":" 和 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"*"}]},{"type":"text","value":" 組成的模版字串 $P$ $(1\\le |P|\\le 30)$，"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"輸出說明"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"輸出一個正整數表示長度為 $n$ 且滿足條件 $P$ 的字串數量。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"範例輸入 1"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"10 \n1\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"範例輸出 1"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"1023\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"範例輸入 2"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"3\n1*1\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"範例輸出 2"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"2\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"OJ 連結"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://open.kattis.com/problems/insidersidentity"},"children":[{"type":"text","value":"Open Kattis - Insider's Indentity"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"題目出處"}]},{"type":"text","value":"：ICPC 2018 Asia Hanoi Regional"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"解法"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"這題一臉就是動態規劃囉。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"首先，我們可以注意到由於輸入模版的 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"*"}]},{"type":"text","value":" 不超過 15 個，因此全部把他們枚舉出來數量大概不會太多。\n考慮一個字串集合 $\\mathcal{S}$，我們想要知道有多少字串，使得至少有一個子字串出現在 $\\mathcal{S}$ 中，這是一個『試著不要重複計數』的技術問題。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"這個不要重複計數的部分，可以用 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"一對一函數"}]},{"type":"text","value":"(bijection) 的方式處理：對於每一種答案字串 $X$，我們考慮集合 $\\mathcal{S}$ 內的字串第一次出現在 $X$ 的位置，並且把他"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"定義 $\\dp(i, \\mathit{suffix})$ 表示長度為 $i$ 的字串、其後綴字串為 $\\mathit{suffix}$、而且 $\\mathit{suffix}$ 是所有該字串後綴字串之中，出現在 $\\mathrm{prefix}(\\mathcal{S})$ 集合裡面"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"最長"}]},{"type":"text","value":"的那一個。其中 $\\mathrm{prefix}(\\mathcal{S})$ 是所有 $\\mathcal{S}$ 前綴字串所形成的集合。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"參考程式碼"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-cpp"]},"children":[{"type":"text","value":"#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long LL;\n\n\nint main() {\n  int n;\n  string S;\n  cin >> n >> S;\n\n  // 枚舉所有可能的 states\n  vector<int> state_space;\n  function<void(int, int)> dfs = [&](int now, int i) {\n    state_space.push_back(now + (1<<i));\n    if (i + 1 < S.size()) {\n      if (S[i] == '*') dfs(now*2, i+1);\n      dfs(now*2+1, i+1);\n    }\n  };\n  dfs(0, 0);\n  sort(state_space.begin(), state_space.end());\n  state_space.resize(unique(state_space.begin(), state_space.end()) - state_space.begin());\n\n\n  // 產生不同長度的模版，用來比對。\n  vector<int> patterns = {0};\n  for (int i = 0, p = 0; i < (int)S.size(); i++) {\n    p = p * 2 + (S[i] == '1');\n    patterns.push_back(p);\n  }\n  \n  // 計算下一個狀態轉移。\n  const int DONE = -1;\n  auto GetNextValidState = [&](int state) -> int {\n    int len = 31 - __builtin_clz(state);\n    for (int i = len; i >= 0; i--) {\n      if ((state&patterns[i]) == patterns[i]) {\n        if (i == S.size()) {\n          // 如果已匹配整個字串，就可以停下來了。\n          return DONE;\n        } else {\n          // 取得離散化後的狀態編號。\n          int nxt = (1<<i) + (state & ((1<<i)-1));\n          return lower_bound(state_space.begin(), state_space.end(), nxt) - state_space.begin();\n        }\n      }\n    }\n    return 1;\n  };\n\n  // 對所有狀態，列出下一個狀態的編號。\n  vector<int> add0(state_space.size()), add1(state_space.size());\n  for (int i = 0; i < state_space.size(); i++) {\n    int state = state_space[i];\n    add0[i] = GetNextValidState(state*2);\n    add1[i] = GetNextValidState(state*2+1);\n  }\n  \n  // 開始跑動態規劃。\n  LL ans = 0;\n  vector<LL> dp(state_space.size(), 0);\n  dp[0] = 1;\n\n  for (int i = 1; i <= n; i++) {\n    vector<LL> dp_next(state_space.size(), 0);\n    for (int j = 0; j < state_space.size(); j++) {\n      if (add0[j] == DONE)\n        ans += dp[j] * (1LL<<(n-i));\n      else\n        dp_next[add0[j]] += dp[j];\n      if (add1[j] == DONE)\n        ans += dp[j] * (1LL<<(n-i));\n      else\n        dp_next[add1[j]] += dp[j];\n    }\n    dp.swap(dp_next);\n  }\n  cout << ans << endl;\n  return 0;\n}\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"關於競程日記"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"🍅 如果您想到更多有趣漂亮簡單乾淨的解法話歡迎留言給競程日記小編群！"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"ℹ️ 這是一篇投稿給"},{"type":"element","tagName":"a","properties":{"href":"https://www.facebook.com/%E7%AB%B6%E7%A8%8B%E6%97%A5%E8%A8%98-1514973425463954/"},"children":[{"type":"text","value":"競程日記"}]},{"type":"text","value":"的文章，歡迎大家投稿、交流與分享程式解題競賽的點點滴滴！"}]}],"data":{"quirksMode":false}},"frontmatter":{"date":"January 14, 2019","path":"/problem/icpc/asia_hanoi_2018/I","title":"Insider's Identity","description":"在一個遙遠的星球上，一個情報單位打算派遣一些間諜到地球上進行偵查任務。\n為了確保偵查任務能夠在極為機密的情形下進行，情報單位打算指派每一個間諜一個秘密 ID。\n\n每一個 ID 由一個長度為 $n$ 的 01-字串 (binary string) 組成。\n為了避免敵人的滲透，情報單位選擇了一個由 `1` 和 `*` 組成的模版 $P$，如果這個模版能夠成功與 ID 進行配對，那麼就可以判斷這個 ID 為真。\n\n對於一個字串 $S=s_1s_2\\cdots s_n$ 以及一個模版 $P=p_1\\cdots p_m$ 成功配對的定義如下：\n\n* 若 $m=n$，而且對所有 $i$，要嘛 $s_i=$`1` 或 $p_i=$`*`。\n* 若 $m>n$，而且在 $S$ 內部存在一個長度為 $m$ 的子字串成功與 $P$ 配對。\n\n請幫助情報單位計算總共有多少 ID 可以使用。\n","roadmap_label_h3":null,"backlink":"/icpcblog-weekly-2019"}}},"pageContext":{}}