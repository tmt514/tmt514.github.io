{"data":{"markdownRemark":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"簡化後題目敘述"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{},"children":[{"type":"element","tagName":"showvariable","properties":{"varname":"description"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"輸入說明"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"第一列包含整數 $n$ ($3\\le n\\le 100000$)。接下來的 $n$ 列每一列包含四個整數 $u_x, u_y, v_x, v_y$ ($u_x < v_x$ 且 $u_y > v_y$) 表示一個矩形的兩個角落座標，其中 $(u_x, u_y)$ 是左上角、而 $(v_x, v_y)$ 是右下角。所有座標範圍都在 $-10^7$ 和 $10^7$ 之間。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"輸出說明"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"輸出兩條水平線能切出的最大矩形數量。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"範例輸入 1"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"5\n0 13 4 4\n2 14 11 9\n7 17 12 12\n3 5 16 0\n5 2 13 1\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"範例輸出 1"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"5\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"範例輸入 2"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"5\n0 4 4 0\n1 3 3 1\n5 8 9 4\n0 12 4 8\n1 11 3 9\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"範例輸出 2"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"4\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"OJ 連結"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://codeforces.com/gym/101987"},"children":[{"type":"text","value":"Codeforces Gym"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"題目出處"}]},{"type":"text","value":"：ICPC 2018 Asia Seoul Regional"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"解法"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"這題是線段樹/區間樹很直接的應用。由於切割的都是水平線，對於每一個輸入的矩形只要考慮它的 Y-座標區間就可以了。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"利用掃描線的概念，考慮其中 Y-座標較低的那條線的位置（比方說讓一個變數 $y_0$ 從下到上慢慢推進）。固定了這條線 $y=y_0$ 以後，問題便轉化為：從所有比這條線還要高的區間中，找出一個 $y$ 值使得戳到的區間數量最大。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"隨著 $y_0$ 值變大，比這條線還要高的區間，會一個一個減少。因此我們需要一種動態資料結構，支援把區間移除後，仍可以找出能戳到最多區間的水平線。一個簡單的想法是直接使用區間樹，在 $y_0$ 值變大的時候逐步把踩到的區間移除。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"參考程式碼"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"下面的程式碼從另一個方向處理區間樹的操作。我們先對所有區間 $I_0, I_1, \\ldots, I_{n-1}$ 依照左界排序（這個順序就是當 $y_0$ 變大的時候，會依序移除區間的順序）。然後我們倒著順序把區間一個一個加入線段樹，並且計算區間們 $I_i, I_{i+1}, \\ldots, I_{n-1}$ 的最大重疊數量（儲存在 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"localmax[i]"}]},{"type":"text","value":" 這個變數裡面）。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"預處理完畢以後，我們讓 $y_0$ 沿著離散化後的區間座標一路遞增，紀錄當前 $y=y_0$ 切到的區間數量（"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"now"}]},{"type":"text","value":"），並且找出最小的 $j$ 使得 $I_j$ 左界是嚴格大於 $y_0$ 的。我們的所求就是（"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"now + localmax[j]"}]},{"type":"text","value":"）"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-cpp"]},"children":[{"type":"text","value":"#include <bits/stdc++.h>\nusing namespace std;\n\n// 離散化：把所有需要的座標記錄下來，排序以後換成離散化後的座標。\nint discretize(vector<pair<int, int>> &a) {\n  vector<int> lisan;\n  for (auto &it : a) {\n    lisan.push_back(it.first);\n    lisan.push_back(it.second);\n  }\n  sort(lisan.begin(), lisan.end());\n  lisan.resize(unique(lisan.begin(), lisan.end()) - lisan.begin());\n  for (size_t i = 0; i < a.size(); i++) {\n    a[i].first =\n        lower_bound(lisan.begin(), lisan.end(), a[i].first) - lisan.begin() + 1;\n    a[i].second = lower_bound(lisan.begin(), lisan.end(), a[i].second) -\n                  lisan.begin() + 1;\n  }\n  return lisan.size();\n}\n\n// 區間樹的節點要存的東西。\nstruct Node {\n  int max, sum;\n  Node(int _max = 0, int _sum = 0) : max(_max), sum(_sum) {}\n};\n\nint main() {\n  // 輸入很大所以要加快讀取輸入的速度。\n  ios_base::sync_with_stdio(false);\n  cin.tie(NULL);\n\n  vector<pair<int, int>> a;\n  int n;\n  cin >> n;\n  for (int i = 0; i < n; i++) {\n    int ux, uy, vx, vy;\n    cin >> ux >> uy >> vx >> vy;\n    a.emplace_back(vy, uy);\n  }\n  // Ranges become [1, m].\n  int m = discretize(a);\n  sort(a.begin(), a.end());\n\n  // Find best offset for an interval tree.\n  int offset = m + 1;\n  while ((offset & -offset) != offset)\n    offset += (offset & -offset);\n\n  vector<int> localmax(n + 1, 0);\n  vector<Node> segtree(2 * offset);\n  const auto pull = [&](int x) {\n    if (x >= offset) {\n      segtree[x].max = segtree[x].sum;\n    } else {\n      segtree[x].max =\n          max(segtree[x * 2].max, segtree[x * 2 + 1].max) + segtree[x].sum;\n    }\n  };\n  auto add_segment = [&](int x, int v) {\n    while (x) {\n      if (x % 2 == 0) {\n        segtree[x].sum += v;\n        pull(x);\n        --x;\n      } else {\n        x /= 2;\n        pull(x + 1);\n      }\n    }\n  };\n\n  for (int i = n - 1; i >= 0; i--) {\n    add_segment(offset + a[i].second, 1);\n    add_segment(offset + a[i].first - 1, -1);\n    localmax[i] = segtree[1].max;\n  }\n\n  vector<int> change(m + 2);\n  for (int i = 0; i < n; i++) {\n    change[a[i].first]++;\n    change[a[i].second + 1]--;\n  }\n  int ans = 0;\n  for (int i = 0, j = 0, now = 0; i <= m; i++) {\n    while (j < n && a[j].first <= i)\n      ++j;\n    now += change[i];\n    ans = max(ans, now + localmax[j]);\n  }\n\n  cout << ans << endl;\n  return 0;\n}\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"關於競程日記"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"🍅 如果您想到更多有趣漂亮簡單乾淨的解法話歡迎留言給競程日記小編群！"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"ℹ️ 這是一篇投稿給"},{"type":"element","tagName":"a","properties":{"href":"https://www.facebook.com/%E7%AB%B6%E7%A8%8B%E6%97%A5%E8%A8%98-1514973425463954/"},"children":[{"type":"text","value":"競程日記"}]},{"type":"text","value":"的文章，歡迎大家投稿、交流與分享程式解題競賽的點點滴滴！"}]}],"data":{"quirksMode":false}},"frontmatter":{"date":"January 24, 2019","path":"/problem/icpc/asia_seoul_2018/A","title":"Circuits","description":"給平面上 $n$ 個矩形，問任意兩條水平線能夠切過的矩形數量的最大值。（切在矩形邊上也算數）。\n","roadmap_label_h3":null,"backlink":"/icpcblog-weekly-2019","css_title_theme":null,"css_content_theme":null}}},"pageContext":{}}