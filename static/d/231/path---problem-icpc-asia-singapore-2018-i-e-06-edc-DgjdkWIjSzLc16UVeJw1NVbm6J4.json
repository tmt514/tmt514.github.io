{"data":{"markdownRemark":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"簡化後題目敘述"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{},"children":[{"type":"element","tagName":"showvariable","properties":{"varname":"description"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"輸入說明"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"第一列包含一個字串 $S$, ($1\\le |S|\\le 1000000$)。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"第二列包含 13 個字串 $T_a, T_b, \\ldots, T_m$。($2\\le |T_a|, |T_b|, \\ldots, |T_m| \\le 50$)"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"第三列包含 13 個字串 $T_n, T_o, \\ldots, T_z$。($2\\le |T_n|, |T_o|, \\ldots, |T_z| \\le 50$)"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"第四列包含一個整數 $K$ ($1\\le K\\le 10^{15}$)。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"第五列包含一個整數 $M$ ($1\\le M\\le 1000$)。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"第六列包含 $M$ 個整數，第 $i$ 個整數為 $m_i$，其中 $1\\le m_i\\le \\min(|f^K(S)|, 10^{15})$。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"輸出說明"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"對於每一個詢問，單獨輸出所求字元於一列。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"範例輸入 1"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"abca\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n1\n2\n1 8\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"範例輸出 1"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"b\nc\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"範例輸入 2"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ab\nba ab cc dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n2\n2\n1 8\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"範例輸出 2"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"a\nb\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"OJ 連結"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://open.kattis.com/problems/prolongedpassword"},"children":[{"type":"text","value":"Open Kattis - Prolonged Password"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"題目出處"}]},{"type":"text","value":"：ICPC 2018 Asia Singapore Regional"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"解法"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"我們可以把函數 $f$ 迭代的過程展開成樹狀圖。而依照順序遍歷葉節點的時候，就相當於把最終的密碼 $P$ 印出來。如果要取得第 $m_i$ 個字元，那麼我們要找的便是由左至右數來第 $m_i$ 個葉子。下圖是第一筆範例以字母 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" 開頭展開三層的樣子。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{},"children":[{"type":"element","tagName":"display","properties":{"binaryTree":"","complete":"","depth":"4","data":"{\n        value: [\"a\", \"b\", \"c\", \"c\", \"d\", \"d\", \"a\", \"d\", \"a\", \"d\", \"d\", \"d\", \"d\", \"b\", \"c\"]\n    }"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果我們從根節點（某個字元 $\\alpha$）開始，事先知道每一個子樹的大小，就可以在 $|T_\\alpha|$ 的時間內直接前往帶有第 $m_i$ 個葉子的子樹。因此，預處理以後我們可以在 $O(50\\times K)$ 的時間內走到我們想要的葉節點。可惜的是，$K$ 太大了，而且整棵樹的大小不見得存得下。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"好消息是，會詢問的數字頂多只有 $10^{15}$，我們可以把超過的部份完全忽略掉：也就是說，對於超過 $10^{15}$ 大小的子樹，我們不需要精確計算其大小，只要標記成「唉呀太大了」就可以了。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"此外，還有另一個方便實作的好消息：題目的條件保證了每一個 $T_\\alpha$ 長度至少有 2。這代表什麼呢？我們只要關心最靠近底層的 $\\log_2(10^{15})\\approx 50$ 層就行啦！如果整棵樹太高，一開始我們只要想辦法從樹根，每次挑選第一個子節點往下走，快速抵達最底下的 50 層就行了～"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"注意到字串僅包含小寫英文字母，從上面往下走得過程，至多 26 步就會產生一個循環。我們可以快速跳過若干循環節，到第 $50+O(1)$ 層停下來。然後從那個地方開始進行前述的「搜索」過程，而且一開始也只需要紀錄 50 層左右的子樹的大小。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"參考程式碼"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"為了方便起見，我直接紀錄到 63 層，往下找循環的時候，也是直接跳到 100 層左右，然後再一個一個走下去。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-cpp"]},"children":[{"type":"text","value":"#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long LL;\nstring S;\nstring T[26];\nLL K;\n\nLL len[26][64];\nconst LL LIMIT = (LL)1e15;\n\nvoid add(LL &x, LL v) {\n  // -1 代表超過長度。\n  if (x == -1 || v == -1) {\n    x = -1;\n  } else {\n    x += v;\n    if (x >= LIMIT)\n      x = -1;\n  }\n}\n\nvoid pre() {\n  for (int i = 0; i < 26; i++) {\n    len[i][0] = 1;\n    len[i][1] = T[i].size();\n  }\n  for (int t = 2; t < 64; t++)\n    for (int i = 0; i < 26; i++)\n      for (auto x : T[i])\n        add(len[i][t], len[x - 'a'][t - 1]);\n}\n\nchar ans;\n\n// 如果還不夠的話就回傳 false，如果找到了就回傳 true.\nbool ask(LL &m, char root, LL k) {\n  if (k == 0) {\n    --m;\n    ans = root;\n    return (m == 0);\n  }\n  if (k < 64 && len[root - 'a'][k] != -1 && len[root - 'a'][k] < m) {\n    m -= len[root - 'a'][k];\n    return false;\n  }\n  if (k <= 100) {\n    for (auto child : T[root - 'a']) {\n      if (ask(m, child, k - 1)) {\n        return true;\n      }\n    }\n  } else {\n    // 找出 cycle, 然後飛到第一個小於100層的地方。\n    int pos[26] = {};\n    int now = root - 'a';\n    int cnt = 1;\n    while (pos[now] == 0) {\n      pos[now] = cnt;\n      now = T[now][0] - 'a';\n      cnt++;\n    }\n    int cycle = cnt - pos[now];\n    k -= (cnt - 1);\n    k -= (k - 100) / cycle * cycle;\n    k -= cycle;\n    return ask(m, now + 'a', k);\n  }\n  return false;\n}\n\nvoid solve() {\n  LL m;\n  cin >> m;\n  for (size_t i = 0; i < S.size(); i++) {\n    if (ask(m, S[i], K))\n      break;\n  }\n  cout << ans << '\\n';\n}\n\nint main() {\n  cin >> S;\n  for (int i = 0; i < 26; i++)\n    cin >> T[i];\n  cin >> K;\n  // 預處理，計算不超過 64 層，以某字元為樹根的子樹大小。\n  pre();\n\n  int M;\n  cin >> M;\n  while (M--)\n    solve();\n  return 0;\n}\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"關於競程日記"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"🍅 如果您想到更多有趣漂亮簡單乾淨的解法話歡迎留言給競程日記小編群！"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"ℹ️ 這是一篇投稿給"},{"type":"element","tagName":"a","properties":{"href":"https://www.facebook.com/%E7%AB%B6%E7%A8%8B%E6%97%A5%E8%A8%98-1514973425463954/"},"children":[{"type":"text","value":"競程日記"}]},{"type":"text","value":"的文章，歡迎大家投稿、交流與分享程式解題競賽的點點滴滴！"}]}],"data":{"quirksMode":false}},"frontmatter":{"date":"January 19, 2019","path":"/problem/icpc/asia_singapore_2018/I","title":"Prolonged Password","description":"給你一個初始字串 $S$，然後根據函數 $f$ 構造密碼 $P=f^K(S)$。函數 $f$ 的操作如下：對於 $S$ 的所有字元，把該字元同時換成對應的字串。同一個字元對應到的替換字串是固定的，如果看到 `a` 就換成 $T_a$、看到 `b` 就換成 $T_b$、依此類推。\n\n給你 $M$ 個詢問。每一個詢問都會讀取一個整數 $m_i$，並且要你回答出密碼 $P$ 的第 $m_i$ 個字元為何。\n","roadmap_label_h3":null,"backlink":"/icpcblog-weekly-2019"}}},"pageContext":{}}