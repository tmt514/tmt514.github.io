{"data":{"markdownRemark":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"簡化後題目敘述"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{},"children":[{"type":"element","tagName":"showvariable","properties":{"varname":"description"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"輸入說明"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"輸入包含多組測試資料，並以 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"0 0"}]},{"type":"text","value":" 作結束。每一筆測試資料包含 6 列："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"第一列有兩個正整數 $N, M$ （$1\\le M, N\\le 100$）"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"第二列有兩個正整數 $r_B, c_B$，表示英文字母 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"B"}]},{"type":"text","value":" 的位置。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"第三列有兩個正整數 $r_C, c_C$，表示英文字母 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"C"}]},{"type":"text","value":" 的位置。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"第四列有兩個正整數 $r_G, c_G$，表示英文字母 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"G"}]},{"type":"text","value":" 的位置。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"第五列有兩個正整數 $r_U, c_U$，表示英文字母 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"U"}]},{"type":"text","value":" 的位置。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"第六列為空白列。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"輸入保證 $1\\le r_B, r_C, r_G, r_U \\le N$ 且 $1\\le c_B, c_C, c_G, c_U\\le M$ 而且四個英文字母的位置不會重疊。\n所有輸入的 $N\\times M$ 加起來不會超過 $10^5$。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"請注意：列的編號"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"從下往上"}]},{"type":"text","value":"編號為 1 到 $N$；行的編號"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"從左往右"}]},{"type":"text","value":"編號為 1 到 $M$。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"輸出說明"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"對於每一筆測試資料輸出 1 或 2 列。\n首先輸出是否存在滿足題目要求的路徑（"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"YES"}]},{"type":"text","value":" 或 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NO"}]},{"type":"text","value":"）。如果答案是 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"YES"}]},{"type":"text","value":"，在第二列輸出任何一個滿足條件的最短路徑。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"範例輸入"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"3 3\n1 1\n3 3\n2 1\n2 2\n\n3 4\n1 1\n3 4\n2 1\n1 2\n\n2 2\n2 1\n2 2\n1 2\n1 1\n\n0 0\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"範例輸出"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"YES\nRRUULLD\nNO\nYES\nRD\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"OJ 連結"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://open.kattis.com/problems/amazingadventures"},"children":[{"type":"text","value":"Open Kattis - Amazing Adventures"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"解法"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"好一陣子沒有這麼痛苦地寫一個理論上有模板很好寫的東西了（淚）"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"這題的關鍵是"},{"type":"element","tagName":"a","properties":{"href":"https://tmt514.github.io/algo/min-cost-max-flow"},"children":[{"type":"text","value":"最小費用流"}]},{"type":"element","tagName":"footnote","properties":{"goto":"1","show":"備註 1"},"children":[]},{"type":"text","value":"（或者，你可以說貪心地做兩次最短路徑。）\n每個格子不能經過超過一次這個條件，給我們一個很大的提示：要嘛這題是網路流、要嘛這是爆搜或連通性DP。\n我們可以令中繼的 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"C"}]},{"type":"text","value":" 作為 sink，而開頭與結束的 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"B"}]},{"type":"text","value":" 與 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"G"}]},{"type":"text","value":" 作為 source，並建立網路流的圖：對於每一個格子 $(i, j)$ 我們都把他變成兩個點 $(i, j)_{in}$ 跟 $(i, j)_{out}$，然後有一條邊從 in 連到 out，cost=1。此外，對於相鄰的兩個格子，比方說 $(i, j)$ 和 $(i, j+1)$。我們也建立兩條邊 $(i, j)_{out}\\to (i, j+1)_{in}$ 以及 $(i, j+1)_{out}\\to (i, j)_{in}$（請注意都是從 out 連到 in），cost=0。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在這樣的圖上面找兩條「點不重複的路徑」 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"B"}]},{"type":"text","value":"$\\to$"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"C"}]},{"type":"text","value":"、"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"G"}]},{"type":"text","value":"$\\to$"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"C"}]},{"type":"text","value":"，而且讓總 cost 最小，就等價於找出最短的從 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"B"}]},{"type":"text","value":"$\\to$"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"C"}]},{"type":"text","value":"$\\to$"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"G"}]},{"type":"text","value":" 路徑。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"參考程式碼"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"有模板會好很多很多很多！\n如果沒有的話，寫起來大概繪像我這樣慘慘的。有一些實作上的偷懶細節在這邊："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"每一次都用 priority queue 版本的 SPFA 找最短路徑。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"每一條邊還自帶輸出字元，這樣在找解的時候就不需要思考這條邊到底要給他 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"U"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"D"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"L"}]},{"type":"text","value":" 還是 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"R"}]},{"type":"text","value":" 了。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"下面程式碼裡面的逆向邊通通標記 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"#"}]},{"type":"text","value":"，這樣可以順便得知這條邊的 cost 到底是 $1$ 還是 $-1$（如果沿著逆向邊流，那 cost 就是 $-1$，反之為 $1$）。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-cpp"]},"children":[{"type":"text","value":"#include <bits/stdc++.h>\nusing namespace std;\n\nstruct Edge {\n  int to;\n  int capacity;\n  int reversed_index;\n  char ch;\n  Edge(int _to, int _c, int _r, char _ch): to(_to), capacity(_c), reversed_index(_r), ch(_ch) {}\n};\n\nclass FlowNetwork {\n  public:\n    int nid, sink;\n    vector<vector<Edge>> edges;\n    FlowNetwork() : nid(0) {\n      edges.clear();\n    }\n    void SetSink(int _sink) { sink = _sink; }\n    int AddNode() {\n      edges.push_back(vector<Edge>());\n      return nid++;\n    }\n    void AddEdge(int from, int to, char mark) {\n      edges[from].emplace_back(to, 1, (int)edges[to].size(), mark);\n      edges[to].emplace_back(from, 0, (int)edges[from].size()-1, '#');\n    }\n    bool SPFA(int x) {\n      priority_queue<pair<int, int>> Q;\n      vector<int> dist(nid, 1e9);\n      vector<Edge> last(nid, Edge(-1,-1,-1,'X'));\n      dist[x] = 0;\n      Q.push({0, x});\n\n      while (!Q.empty()) {\n        auto it = Q.top(); Q.pop();\n        int d = -it.first;\n        int x = it.second;\n        if (d != dist[x]) continue;\n\n        for (auto&& e : edges[x]) {\n          if (e.capacity) {\n            int nd = d + (e.ch == '#' ? -1 : 1);\n            if (dist[e.to] > nd) {\n              dist[e.to] = nd;\n              last[e.to] = edges[e.to][e.reversed_index];\n              Q.push({ -nd, e.to });\n            }\n          }\n        }\n      }\n      if (last[sink].to == -1) return false;\n      x = sink;\n      while (last[x].to != -1) {\n        Edge& e = edges[last[x].to][last[x].reversed_index];\n        e.capacity--;\n        edges[e.to][e.reversed_index].capacity++;\n        x = last[x].to;\n      }\n      return true;\n    }\n    string Trace(int x) {\n      string ret = \"\";\n      while (x != sink) {\n        for (auto&& e : edges[x]) {\n          if (e.ch != '#' && e.capacity == 0) {\n            x = e.to;\n            if (e.ch != 'X') ret += e.ch;\n          }\n        }\n      }\n      return ret;\n    }\n};\n\nint ids[105][105][2];\n\nbool solve() {\n  int M, N;\n  // 請不要讀反輸入，這樣會 debug 很久（淚）。\n  cin >> N >> M;\n\n  if (M == 0 && N == 0) return false;\n  FlowNetwork g;\n\n  // 先定義這個圖上的點。\n  for (int i = 1; i <= N; i++) {\n    for (int j = 1; j <= M; j++) {\n      ids[i][j][0] = g.AddNode();\n      ids[i][j][1] = g.AddNode();\n    }\n  }\n\n  int rB, cB, rC, cC, rG, cG, rU, cU;\n  cin >> rB >> cB >> rC >> cC >> rG >> cG >> rU >> cU;\n\n  // 把圖上的邊建立起來，記得要跳過 (rU, cU) 這格。\n  for (int x = 1; x <= N; x++) {\n    for (int y = 1; y <= M; y++) {\n      if (x == rU && y == cU) continue;\n      g.AddEdge(ids[x][y][0], ids[x][y][1], 'X');\n      const int dx[4] = {0, 1, 0, -1};\n      const int dy[4] = {1, 0, -1, 0};\n      const string dir = \"RULD\";\n      for (int f = 0; f < 4; f++) {\n        int nx = x + dx[f], ny = y + dy[f];\n        if (nx == rU && ny == cU) continue;\n        if (nx >= 1 && nx <= N && ny >= 1 && ny <= M) {\n          g.AddEdge(ids[x][y][1], ids[nx][ny][0], dir[f]);\n        }\n      }\n    }\n  }\n\n  g.SetSink(ids[rC][cC][0]);\n  if (g.SPFA(ids[rB][cB][0]) && g.SPFA(ids[rG][cG][0])) {\n    auto A = g.Trace(ids[rB][cB][0]);\n    auto B = g.Trace(ids[rG][cG][0]);\n    reverse(B.begin(), B.end());\n    for (auto&& x : B) {\n      if (x == 'U') x = 'D';\n      else if (x == 'D') x = 'U';\n      else if (x == 'L') x = 'R';\n      else if (x == 'R') x = 'L';\n    }\n    cout << \"YES\" << '\\n';\n    cout << A << B << '\\n';\n  } else {\n    cout << \"NO\" << '\\n';\n  }\n  \n  return true;\n}\n\nint main() {\n  while (solve());\n  return 0;\n}\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"備註 1"},{"type":"element","tagName":"footnote","properties":{"here":"1"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"需要關於這題更詳盡的資源請參考 "},{"type":"element","tagName":"a","properties":{"href":"https://stackoverflow.com/questions/11880738/shortest-two-disjoint-paths-between-two-specified-vertices"},"children":[{"type":"text","value":"Stackoverflow - Shortest two disjoint paths between two specified vertices"}]},{"type":"text","value":"。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"關於競程日記"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"🍅 如果您想到更多有趣漂亮簡單乾淨的解法話歡迎留言給競程日記小編群！"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"ℹ️ 這是一篇投稿給"},{"type":"element","tagName":"a","properties":{"href":"https://www.facebook.com/%E7%AB%B6%E7%A8%8B%E6%97%A5%E8%A8%98-1514973425463954/"},"children":[{"type":"text","value":"競程日記"}]},{"type":"text","value":"的文章，歡迎大家投稿、交流與分享程式解題競賽的點點滴滴！"}]}],"data":{"quirksMode":false}},"frontmatter":{"date":"January 08, 2019","path":"/problem/icpc/asia_hanoi_2018/A","title":"Amazing Adventures","description":"在一個有 $N$ 列、$M$ 行的方格上，有四個英文字母 `B`, `C`, `G`, `U`。請你找出最短的、從 `B` 經過 `C` 到 `G` 但是不包括 `U` 的路徑，使得每一個格子（包含起點與終點）都不能重複經過。輸出這個路徑。\n","roadmap_label_h3":null,"backlink":"/icpcblog-weekly-2019"}}},"pageContext":{}}