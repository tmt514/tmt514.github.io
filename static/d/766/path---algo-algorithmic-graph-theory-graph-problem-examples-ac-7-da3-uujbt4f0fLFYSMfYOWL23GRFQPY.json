{"data":{"markdownRemark":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"圖的定義"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"以數學物件表示的話，一般來說我們會把圖定義為由點集合 $V$ 和邊集合 $E$ 所形成的配對 $G=(V, E)$。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"圖的分類"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"當我們把模型抽象變成只有點和邊的時候，根據各種需求我們會自然地把所有可能的圖進行分類。比方說根據定義我們可以寫下無向圖、有向圖、無權圖、加權圖、重圖（Multi graph）、近圖（Pseudo graph）、簡單圖、無限圖等等。在這些圖上我們又可以定義道路（Walk）、行跡（Trail）、路徑（Path）、圈或環（Cycle）等等。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"基於這些基本的定義，我們可以刻劃並且分類出一系列具備相同性質的圖。\n比方說："},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"連通圖"}]},{"type":"text","value":"是一類"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"關於輸入格式"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"稍早提到的電腦與圖靈機等等，其輸入內容都是二元字串。要怎麼把一個輸入圖論的圖以二元字串來表達呢？對於一些計算問題而言，不同的輸入方式會造成演算法有著不同的執行效率。說得誇張一點的話，甚至會造成若干數量級的效率差異。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"但其實這就是約定俗成的東西，我們不妨用比較大家都可以接受的方式定義輸入：首先有一個輸入 "}]}],"data":{"quirksMode":false}},"frontmatter":{"date":"February 12, 2019","path":"/algo/algorithmic-graph-theory/graph-problem-examples","title":"圖論演算法 2 - 圖論上的辨認問題","description":null,"roadmap_label_h3":null,"backlink":null}}},"pageContext":{}}